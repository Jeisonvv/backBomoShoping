const User = require("../models/user"); // Importar el modelo de usuario
const bcrypt = require("bcryptjs"); // Librería para hashear contraseñas
const createRandomUsernameAndPassword = require("../utils/createCredential"); // Importar la función para crear credenciales aleatorias

// Crear un usuario solo con el número de teléfono
const createUserWithPhoneService = async (numPhone) => {
  try {
    let user = await User.findOne({ numPhone });

    if (user) {
      if (!user.username || !user.password) {
        const { username, password } = createRandomUsernameAndPassword();

        user.username = username;
        user.password = password; // Contraseña en texto plano

        // Configurar la bandera para evitar el hash de la contraseña
        user.set("autoGeneratedPassword", true);

        // Guardar el usuario
        await user.save();

        return {
          message: "Credenciales generadas para el usuario existente.",
          username: user.username,
          password, // Contraseña en texto plano
        };
      }
      return user;
    }

    const { username, password } = createRandomUsernameAndPassword();

    user = new User({
      numPhone,
      username,
      password, // Contraseña en texto plano
      autoGeneratedPassword: true, // Establecer la bandera al crear el nuevo usuario
      role: "comprador",
    });

    // Guardar el nuevo usuario
    await user.save();

    return {
      message: "Usuario creado exitosamente.",
      username: user.username,
      password, // Contraseña en texto plano
    };
  } catch (error) {
    throw new Error("Error al crear o actualizar el usuario: " + error.message);
  }
};
//  servicion para crear un usuario con el numPhoe . ueserName y pasword

const registerUserService = async (userData) => {
  const { numPhone, username, password } = userData;

  if (!numPhone || !username || !password) {
    throw new Error(
      "El número de teléfono, el username y la contraseña son obligatorios."
    );
  }

  const existingUser = await User.findOne({ numPhone });

  if (existingUser) {
    throw new Error("El número de teléfono ya está registrado.");
  }

  const existingUserName = await User.findOne({ username });

  if (existingUserName) {
    throw new Error("El username ya existe.");
  }

  const newUser = new User({
    numPhone,
    username,
    password,
  });

  return await newUser.save();
};

// agregar producto al usuario

const addProductToUserService = async (numPhone, productData) => {
  try {
    let user = await User.findOne({ numPhone });

    // Si el usuario no existe, crea uno y asigna el resultado a 'user'
    if (!user) {
      const newUser = await createUserWithPhoneService(numPhone);
      user = await User.findOne({ numPhone }); // Vuelve a buscar el usuario creado
    }

    // Agrega el producto al array de compras
    user.purchases.push(productData);
    await user.save();

    return {
      message: "Producto agregado al usuario exitosamente.",
      product: productData,
    };
  } catch (error) {
    throw new Error("Error al agregar producto al usuario: " + error.message);
  }
};

// Actualizar el usuario en la base de datos
const updateUserService = async (numPhone, userData) => {
  try {
    // Asegúrate de que el número de teléfono sea válido
    if (!numPhone) {
      throw new Error("El número de teléfono del usuario es obligatorio.");
    }
    // no permite actulizar estos campos por seguridad
    delete userData.numPhone;
    delete userData.password;
    delete userData.username;

    // Actualizar el usuario en la base de datos
    const updatedUser = await User.findOneAndUpdate(
      { numPhone }, // Filtro por el número de teléfono
      { $set: userData }, // Campos a actualizar
      { new: true, runValidators: true } // Retorna el usuario actualizado y valida datos
    );

    // Validar si el usuario existe
    if (!updatedUser) {
      throw new Error("Usuario no encontrado o no se pudo actualizar.");
    }

    return updatedUser;
  } catch (error) {
    throw new Error(`Error al actualizar el usuario: ${error.message}`);
  }
};

// Actualizar las credenciales del usuario
const updateCredentialsService = async (numPhone, username, password) => {
  try {
    // Buscar al usuario por el numPhone
    let user = await User.findOne({ numPhone });
    if (!user) {
      throw new Error("Usuario no encontrado");
    }

    // Si se proporciona un nuevo username, actualizamos
    if (username) {
      user.username = username;
    }

    // Si se proporciona una nueva contraseña, la procesamos
    if (password) {
      user.password = password; // Asignamos la nueva contraseña en texto plano
      user.autoGeneratedPassword = false; // Indicamos que la contraseña fue modificada por el usuario
    }

    // Guardamos los cambios
    await user.save();

    return {
      message: "Credenciales actualizadas exitosamente",
      username: user.username,
      password: password || "Contraseña no modificada",
    };
  } catch (error) {
    throw new Error("Error al actualizar las credenciales: " + error.message);
  }
};
// servicio para modificar el array de comras
const updatePurchasesServiceUsers = async (numPhone, productsToUpdate) => {
  try {
    // Buscar el usuario por su número de teléfono
    const user = await User.findOne({ numPhone });
    if (!user) {
      throw new Error("Usuario no encontrado");
    }

    // Iterar sobre los productos que necesitamos actualizar
    const updatedPurchases = user.purchases.map((purchase) => {
      const productUpdate = productsToUpdate.find(
        (product) => product.productId === purchase._id.toString()
      );

      if (productUpdate) {
        // Si el producto está en el array de productos a actualizar, verificamos los campos modificados

        // Modificamos solo si hay cambios
        if (
          productUpdate.status !== undefined &&
          productUpdate.status !== purchase.status
        ) {
          purchase.status = productUpdate.status;
        }

        if (
          productUpdate.paid !== undefined &&
          productUpdate.paid !== purchase.paid
        ) {
          purchase.paid = productUpdate.paid;
        }

        if (
          productUpdate.productName !== undefined &&
          productUpdate.productName !== purchase.productName
        ) {
          purchase.productName = productUpdate.productName;
        }

        if (
          productUpdate.price !== undefined &&
          productUpdate.price !== purchase.price
        ) {
          purchase.price = productUpdate.price;
        }

        // Puedes agregar más campos si lo necesitas, como la fecha de compra o cualquier otro campo
      }

      return purchase;
    });

    // Actualizamos el array de purchases del usuario
    user.purchases = updatedPurchases;

    // Guardamos los cambios
    await user.save();

    return user;
  } catch (error) {
    throw new Error(error.message);
  }
};

// Servicio para obtener todos los usuarios
const getUserService = async () => {
  try {
    const users = await User.find();
    return users;
  } catch (error) {
    throw new Error("Error al obtener los usuarios: " + error.message);
  }
};
// Servicio para obtener un usuario por su id
const getUserByIdService = async (numPhone) => {
  try {
    const user = await User.findOne({ numPhone });
    return user;
  } catch (error) {
    throw new Error("Error al obtener el usuario: " + error.message);
  }
};
// Servicio para obtener las credenciales de un usuario
const getUserCredentialsService = async (numPhone) => {
  try {
    // Buscar el usuario por el número de teléfono
    const user = await User.findOne({ numPhone });

    if (!user) {
      throw new Error("Usuario no encontrado.");
    }

    // Verificar si el usuario tiene credenciales
    if (!user.username || !user.password) {
      throw new Error("El usuario no tiene credenciales generadas.");
    }

    // Retornar las credenciales del usuario
    return {
      username: user.username,
      password: user.password, // Contraseña en texto plano
    };
  } catch (error) {
    throw new Error(
      `Error al obtener credenciales del usuario: ${error.message}`
    );
  }
};
//servicio para obtener las compras de un usuario
const getUserPurchasesService = async (numPhone) => {
  try {
    // Buscar al usuario por numPhone
    const user = await User.findOne({ numPhone });

    // Si el usuario no existe, lanzar un error
    if (!user) {
      throw new Error("Usuario no encontrado.");
    }

    // Devolver solo el array de compras
    return user.purchases;
  } catch (error) {
    throw new Error("Error al obtener los productos: " + error.message);
  }
};

// Servicio para eliminar un usuario
const deleteUserService = async (numPhone) => {
  try {
    const user = await User.findOneAndDelete({ numPhone });
    if (!user) {
      throw new Error("Usuario no encontrado");
    }
  } catch (error) {
    throw new Error("Error al eliminar el usuario: " + error.message);
  }
};

// Servicio para eliminar todos los productos del array de compras
const clearPurchasesService = async (numPhone) => {
  try {
    // Buscar al usuario por numPhone
    const user = await User.findOne({ numPhone });

    // Si el usuario no existe, lanzar un error
    if (!user) {
      throw new Error("Usuario no encontrado.");
    }

    // Vaciar el array de compras
    user.purchases = [];

    // Guardar los cambios en la base de datos
    await user.save();

    return {
      message: "Todos los productos han sido eliminados del array de compras.",
    };
  } catch (error) {
    throw new Error("Error al eliminar los productos: " + error.message);
  }
};

// servicio para eliminar un producto del array por el productid de compras
const deleteProductFromUserService = async (numPhone, productId) => {
  try {
    // Buscar al usuario por numPhone
    const user = await User.findOne({ numPhone });

    if (!user) {
      throw new Error("Usuario no encontrado.");
    }

    // Filtrar el array de compras para excluir el producto con el productId
    const initialLength = user.purchases.length;
    user.purchases = user.purchases.filter(
      (product) => product.productId !== productId
    );

    if (initialLength === user.purchases.length) {
      throw new Error("Producto no encontrado en el array de compras.");
    }

    // Guardar los cambios en la base de datos
    await user.save();

    return { message: "Producto eliminado con éxito." };
  } catch (error) {
    throw new Error("Error al eliminar el producto: " + error.message);
  }
};

module.exports = {
  createUserWithPhoneService,
  updateUserService,
  getUserService,
  getUserByIdService,
  deleteUserService,
  getUserCredentialsService,
  updateCredentialsService,
  addProductToUserService,
  clearPurchasesService,
  getUserPurchasesService,
  deleteProductFromUserService,
  registerUserService,
  updatePurchasesServiceUsers,
}; // Exportar los servicios
